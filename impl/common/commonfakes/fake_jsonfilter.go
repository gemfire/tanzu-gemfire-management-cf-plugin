// Code generated by counterfeiter. DO NOT EDIT.
package commonfakes

import (
	"encoding/json"
	"sync"

	"github.com/gemfire/cloudcache-management-cf-plugin/impl/common"
)

type FakeJSONFilter struct {
	FilterStub        func(string, string) ([]json.RawMessage, error)
	filterMutex       sync.RWMutex
	filterArgsForCall []struct {
		arg1 string
		arg2 string
	}
	filterReturns struct {
		result1 []json.RawMessage
		result2 error
	}
	filterReturnsOnCall map[int]struct {
		result1 []json.RawMessage
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeJSONFilter) Filter(arg1 string, arg2 string) ([]json.RawMessage, error) {
	fake.filterMutex.Lock()
	ret, specificReturn := fake.filterReturnsOnCall[len(fake.filterArgsForCall)]
	fake.filterArgsForCall = append(fake.filterArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Filter", []interface{}{arg1, arg2})
	fake.filterMutex.Unlock()
	if fake.FilterStub != nil {
		return fake.FilterStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.filterReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeJSONFilter) FilterCallCount() int {
	fake.filterMutex.RLock()
	defer fake.filterMutex.RUnlock()
	return len(fake.filterArgsForCall)
}

func (fake *FakeJSONFilter) FilterCalls(stub func(string, string) ([]json.RawMessage, error)) {
	fake.filterMutex.Lock()
	defer fake.filterMutex.Unlock()
	fake.FilterStub = stub
}

func (fake *FakeJSONFilter) FilterArgsForCall(i int) (string, string) {
	fake.filterMutex.RLock()
	defer fake.filterMutex.RUnlock()
	argsForCall := fake.filterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeJSONFilter) FilterReturns(result1 []json.RawMessage, result2 error) {
	fake.filterMutex.Lock()
	defer fake.filterMutex.Unlock()
	fake.FilterStub = nil
	fake.filterReturns = struct {
		result1 []json.RawMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeJSONFilter) FilterReturnsOnCall(i int, result1 []json.RawMessage, result2 error) {
	fake.filterMutex.Lock()
	defer fake.filterMutex.Unlock()
	fake.FilterStub = nil
	if fake.filterReturnsOnCall == nil {
		fake.filterReturnsOnCall = make(map[int]struct {
			result1 []json.RawMessage
			result2 error
		})
	}
	fake.filterReturnsOnCall[i] = struct {
		result1 []json.RawMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeJSONFilter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.filterMutex.RLock()
	defer fake.filterMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeJSONFilter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ common.JSONFilter = new(FakeJSONFilter)

// Code generated by counterfeiter. DO NOT EDIT.
package commonfakes

import (
	"sync"

	"github.com/gemfire/cloudcache-management-cf-plugin/domain"
	"github.com/gemfire/cloudcache-management-cf-plugin/impl/common"
)

type FakeFormatter struct {
	DescribeEndpointStub        func(domain.RestEndPoint, bool) string
	describeEndpointMutex       sync.RWMutex
	describeEndpointArgsForCall []struct {
		arg1 domain.RestEndPoint
		arg2 bool
	}
	describeEndpointReturns struct {
		result1 string
	}
	describeEndpointReturnsOnCall map[int]struct {
		result1 string
	}
	FormatResponseStub        func(string, string, bool) (string, error)
	formatResponseMutex       sync.RWMutex
	formatResponseArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 bool
	}
	formatResponseReturns struct {
		result1 string
		result2 error
	}
	formatResponseReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFormatter) DescribeEndpoint(arg1 domain.RestEndPoint, arg2 bool) string {
	fake.describeEndpointMutex.Lock()
	ret, specificReturn := fake.describeEndpointReturnsOnCall[len(fake.describeEndpointArgsForCall)]
	fake.describeEndpointArgsForCall = append(fake.describeEndpointArgsForCall, struct {
		arg1 domain.RestEndPoint
		arg2 bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeEndpoint", []interface{}{arg1, arg2})
	fake.describeEndpointMutex.Unlock()
	if fake.DescribeEndpointStub != nil {
		return fake.DescribeEndpointStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeEndpointReturns
	return fakeReturns.result1
}

func (fake *FakeFormatter) DescribeEndpointCallCount() int {
	fake.describeEndpointMutex.RLock()
	defer fake.describeEndpointMutex.RUnlock()
	return len(fake.describeEndpointArgsForCall)
}

func (fake *FakeFormatter) DescribeEndpointCalls(stub func(domain.RestEndPoint, bool) string) {
	fake.describeEndpointMutex.Lock()
	defer fake.describeEndpointMutex.Unlock()
	fake.DescribeEndpointStub = stub
}

func (fake *FakeFormatter) DescribeEndpointArgsForCall(i int) (domain.RestEndPoint, bool) {
	fake.describeEndpointMutex.RLock()
	defer fake.describeEndpointMutex.RUnlock()
	argsForCall := fake.describeEndpointArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFormatter) DescribeEndpointReturns(result1 string) {
	fake.describeEndpointMutex.Lock()
	defer fake.describeEndpointMutex.Unlock()
	fake.DescribeEndpointStub = nil
	fake.describeEndpointReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeFormatter) DescribeEndpointReturnsOnCall(i int, result1 string) {
	fake.describeEndpointMutex.Lock()
	defer fake.describeEndpointMutex.Unlock()
	fake.DescribeEndpointStub = nil
	if fake.describeEndpointReturnsOnCall == nil {
		fake.describeEndpointReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.describeEndpointReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeFormatter) FormatResponse(arg1 string, arg2 string, arg3 bool) (string, error) {
	fake.formatResponseMutex.Lock()
	ret, specificReturn := fake.formatResponseReturnsOnCall[len(fake.formatResponseArgsForCall)]
	fake.formatResponseArgsForCall = append(fake.formatResponseArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 bool
	}{arg1, arg2, arg3})
	fake.recordInvocation("FormatResponse", []interface{}{arg1, arg2, arg3})
	fake.formatResponseMutex.Unlock()
	if fake.FormatResponseStub != nil {
		return fake.FormatResponseStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.formatResponseReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFormatter) FormatResponseCallCount() int {
	fake.formatResponseMutex.RLock()
	defer fake.formatResponseMutex.RUnlock()
	return len(fake.formatResponseArgsForCall)
}

func (fake *FakeFormatter) FormatResponseCalls(stub func(string, string, bool) (string, error)) {
	fake.formatResponseMutex.Lock()
	defer fake.formatResponseMutex.Unlock()
	fake.FormatResponseStub = stub
}

func (fake *FakeFormatter) FormatResponseArgsForCall(i int) (string, string, bool) {
	fake.formatResponseMutex.RLock()
	defer fake.formatResponseMutex.RUnlock()
	argsForCall := fake.formatResponseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFormatter) FormatResponseReturns(result1 string, result2 error) {
	fake.formatResponseMutex.Lock()
	defer fake.formatResponseMutex.Unlock()
	fake.FormatResponseStub = nil
	fake.formatResponseReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeFormatter) FormatResponseReturnsOnCall(i int, result1 string, result2 error) {
	fake.formatResponseMutex.Lock()
	defer fake.formatResponseMutex.Unlock()
	fake.FormatResponseStub = nil
	if fake.formatResponseReturnsOnCall == nil {
		fake.formatResponseReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.formatResponseReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeFormatter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.describeEndpointMutex.RLock()
	defer fake.describeEndpointMutex.RUnlock()
	fake.formatResponseMutex.RLock()
	defer fake.formatResponseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFormatter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ common.Formatter = new(FakeFormatter)

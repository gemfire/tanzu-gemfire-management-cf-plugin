// Code generated by counterfeiter. DO NOT EDIT.
package implfakes

import (
	"github.com/gemfire/cloudcache-management-cf-plugin/domain"
	"io"
	"sync"

	"github.com/gemfire/cloudcache-management-cf-plugin/impl"
)

type FakeRequestHelper struct {
	ExchangeStub        func(string, string, io.Reader, *domain.ConnectionData) (string, error)
	exchangeMutex       sync.RWMutex
	exchangeArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 io.Reader
		arg4 *domain.ConnectionData
	}
	exchangeReturns struct {
		result1 string
		result2 error
	}
	exchangeReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRequestHelper) Exchange(arg1 string, arg2 string, arg3 io.Reader, arg4 *domain.ConnectionData) (string, error) {
	fake.exchangeMutex.Lock()
	ret, specificReturn := fake.exchangeReturnsOnCall[len(fake.exchangeArgsForCall)]
	fake.exchangeArgsForCall = append(fake.exchangeArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 io.Reader
		arg4 *domain.ConnectionData
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("Exchange", []interface{}{arg1, arg2, arg3, arg4})
	fake.exchangeMutex.Unlock()
	if fake.ExchangeStub != nil {
		return fake.ExchangeStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.exchangeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRequestHelper) ExchangeCallCount() int {
	fake.exchangeMutex.RLock()
	defer fake.exchangeMutex.RUnlock()
	return len(fake.exchangeArgsForCall)
}

func (fake *FakeRequestHelper) ExchangeCalls(stub func(string, string, io.Reader, *domain.ConnectionData) (string, error)) {
	fake.exchangeMutex.Lock()
	defer fake.exchangeMutex.Unlock()
	fake.ExchangeStub = stub
}

func (fake *FakeRequestHelper) ExchangeArgsForCall(i int) (string, string, io.Reader, *domain.ConnectionData) {
	fake.exchangeMutex.RLock()
	defer fake.exchangeMutex.RUnlock()
	argsForCall := fake.exchangeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRequestHelper) ExchangeReturns(result1 string, result2 error) {
	fake.exchangeMutex.Lock()
	defer fake.exchangeMutex.Unlock()
	fake.ExchangeStub = nil
	fake.exchangeReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeRequestHelper) ExchangeReturnsOnCall(i int, result1 string, result2 error) {
	fake.exchangeMutex.Lock()
	defer fake.exchangeMutex.Unlock()
	fake.ExchangeStub = nil
	if fake.exchangeReturnsOnCall == nil {
		fake.exchangeReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.exchangeReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeRequestHelper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.exchangeMutex.RLock()
	defer fake.exchangeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRequestHelper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ impl.RequestHelper = new(FakeRequestHelper)

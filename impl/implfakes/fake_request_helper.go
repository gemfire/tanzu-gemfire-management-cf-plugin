// Code generated by counterfeiter. DO NOT EDIT.
package implfakes

import (
	"io"
	"sync"

	"github.com/gemfire/cloudcache-management-cf-plugin/domain"
	"github.com/gemfire/cloudcache-management-cf-plugin/impl"
)

type FakeRequestHelper struct {
	Stub        func(string, string, io.Reader, *domain.ConnectionData) (string, int, error)
	mutex       sync.RWMutex
	argsForCall []struct {
		arg1 string
		arg2 string
		arg3 io.Reader
		arg4 *domain.ConnectionData
	}
	returns struct {
		result1 string
		result2 int
		result3 error
	}
	returnsOnCall map[int]struct {
		result1 string
		result2 int
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRequestHelper) Spy(arg1 string, arg2 string, arg3 io.Reader, arg4 *domain.ConnectionData) (string, int, error) {
	fake.mutex.Lock()
	ret, specificReturn := fake.returnsOnCall[len(fake.argsForCall)]
	fake.argsForCall = append(fake.argsForCall, struct {
		arg1 string
		arg2 string
		arg3 io.Reader
		arg4 *domain.ConnectionData
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("RequestHelper", []interface{}{arg1, arg2, arg3, arg4})
	fake.mutex.Unlock()
	if fake.Stub != nil {
		return fake.Stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.returns.result1, fake.returns.result2, fake.returns.result3
}

func (fake *FakeRequestHelper) CallCount() int {
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	return len(fake.argsForCall)
}

func (fake *FakeRequestHelper) Calls(stub func(string, string, io.Reader, *domain.ConnectionData) (string, int, error)) {
	fake.mutex.Lock()
	defer fake.mutex.Unlock()
	fake.Stub = stub
}

func (fake *FakeRequestHelper) ArgsForCall(i int) (string, string, io.Reader, *domain.ConnectionData) {
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	return fake.argsForCall[i].arg1, fake.argsForCall[i].arg2, fake.argsForCall[i].arg3, fake.argsForCall[i].arg4
}

func (fake *FakeRequestHelper) Returns(result1 string, result2 int, result3 error) {
	fake.mutex.Lock()
	defer fake.mutex.Unlock()
	fake.Stub = nil
	fake.returns = struct {
		result1 string
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRequestHelper) ReturnsOnCall(i int, result1 string, result2 int, result3 error) {
	fake.mutex.Lock()
	defer fake.mutex.Unlock()
	fake.Stub = nil
	if fake.returnsOnCall == nil {
		fake.returnsOnCall = make(map[int]struct {
			result1 string
			result2 int
			result3 error
		})
	}
	fake.returnsOnCall[i] = struct {
		result1 string
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRequestHelper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRequestHelper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ impl.RequestHelper = new(FakeRequestHelper).Spy

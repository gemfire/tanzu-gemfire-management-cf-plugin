
resource_types:
- name: pcf-pool
  type: docker-image
  source:
    repository: cftoolsmiths/toolsmiths-envs-resource

- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: gcp-env
  type: pcf-pool
  tags: [gem-observability-vsphere]
  source:
    api_token: ((poolsmiths-api-token))
    hostname: environments.toolsmiths.cf-app.com
    pool_name: us_2_6

- name: latest-ci-passing-pcc
  type: pivnet
  source:
    api_token: ((pivnet-api-token))
    product_slug: p-cloudcache
    product_version: 1\.8\..*

- name: cloudcache-metrics-source
  type: git
  source:
    branch: master
    ignore_paths:
      - "ci/*"
      - "**/*.md"
    uri: git@github.com:pivotal-cf/cloudcache-metrics-release.git
    private_key: ((!gemfire-ci-private-key))

- name: cloudcache-metrics-release-ci-dockerfile
  type: git
  source:
    branch: master
    paths:
      - "ci/docker/*"
    uri: git@github.com:pivotal-cf/cloudcache-metrics-release.git
    private_key: ((!gemfire-ci-private-key))

- name: stemcell
  type: pivnet
  source:
    api_token: ((pivnet-api-token))
    product_slug: stemcells-ubuntu-xenial
    product_version: 315\..*

- name: cloudcache-metrics-release-ci-image
  type: docker-image
  source:
    username: "_json_key"
    password: ((!concourse-gcp-key))
    repository: gcr.io/gemfire-dev/cloudcache-metrics-release-ci

- name: weekly
  type: time
  source:
    start: 3:00 AM
    stop: 4:00 AM
    days: [Monday]
    location: America/Los_Angeles

jobs:
- name: build-docker-image
  plan:
  - get: weekly
    trigger: true
  - get: cloudcache-metrics-release-ci-dockerfile
    trigger: true
  - put: cloudcache-metrics-release-ci-image
    params:
      build: cloudcache-metrics-release-ci-dockerfile/ci/docker
      tag_as_latest: true

- name: get-env
  plan:
  - get: cloudcache-metrics-source
    trigger: true
  - get: cloudcache-metrics-release-ci-image
    trigger: true
    passed:
      - build-docker-image
  - put: gcp-env
    tags: [gem-observability-vsphere]
    params:
      action: claim
  - task: output-env-details
    config:
      platform: linux
      inputs:
      - name: gcp-env
      image_resource:
        type: docker-image
        source:
          repository: alpine
      run:
        path: sh
        args:
        - -ec
        - ls -la gcp-env

- name: install-pcc
  plan:
  - aggregate:
    - get: gcp-env
      tags: [gem-observability-vsphere]
      trigger: true
      passed:
      - get-env
    - get: cloudcache-metrics-source
      trigger: true
      passed:
      - get-env
    - get: latest-ci-passing-pcc
    - get: stemcell
      params:
        preserve_filename: true
        globs: ["*google*"]
    - get: cloudcache-metrics-release-ci-image
      trigger: true
      passed:
      - get-env
  - task: install-pcc
    image: cloudcache-metrics-release-ci-image
    config:
      platform: linux
      inputs:
      - name: gcp-env
      - name: latest-ci-passing-pcc
      - name: cloudcache-metrics-source
      - name: stemcell
      run:
        path: bash
        args:
        - -ec
        - |
          stemcell_location="$(ls $PWD/stemcell/*.tgz)"
          cloudcache-metrics-source/ci/install.sh -p "$PWD/latest-ci-passing-pcc" -s "$stemcell_location" -g "$PWD/gcp-env/metadata"

- name: create-service
  plan:
    - aggregate:
      - get: gcp-env
        tags: [gem-observability-vsphere]
        trigger: true
        passed:
          - install-pcc
      - get: cloudcache-metrics-source
        trigger: true
        passed:
          - install-pcc
      - get: cloudcache-metrics-release-ci-image
        trigger: true
        passed:
          - install-pcc
    - task: create-service-instance
      image: cloudcache-metrics-release-ci-image
      config:
        platform: linux
        inputs:
          - name: gcp-env
          - name: cloudcache-metrics-source
        run:
          path: bash
          args:
            - -ec
            - |
              bash cloudcache-metrics-source/ci/create-service.bash -g "$PWD/gcp-env/metadata"

- name: overwrite-cloudcache-metrics-release
  plan:
    - aggregate:
      - get: gcp-env
        tags: [gem-observability-vsphere]
        trigger: true
        passed:
        - create-service
      - get: cloudcache-metrics-source
        trigger: true
        passed:
        - create-service
      - get: cloudcache-metrics-release-ci-image
        trigger: true
        passed:
        - create-service
    - task: build-cloudcache-metrics
      config:
        platform: linux
        inputs:
          - name: cloudcache-metrics-source
        outputs:
        - name: cloudcache-metrics-jar
        image_resource:
          type: docker-image
          source:
            repository: openjdk
            tag: 8
        run:
          path: sh
          args:
            - -ec
            - |
              cd cloudcache-metrics-source/src/cloudcache-metrics
              ./gradlew build
              mv build/libs/cloudcache-metrics.jar ../../../cloudcache-metrics-jar/cloudcache-metrics.jar
    - task: overwrite
      image: cloudcache-metrics-release-ci-image
      config:
        platform: linux
        inputs:
          - name: gcp-env
          - name: cloudcache-metrics-source
          - name: cloudcache-metrics-jar
        run:
          path: bash
          args:
            - -ec
            - |
              ops_man_user="$(jq -r .ops_manager.username < "${PWD}/gcp-env/metadata")"
              ops_man_url="$(jq -r .ops_manager.url < "${PWD}/gcp-env/metadata")"
              ops_man_password="$(jq -r .ops_manager.password < "${PWD}/gcp-env/metadata")"
              cat ${PWD}/gcp-env/metadata | jq -r '.ops_manager_private_key' > omprivatekey
              eval "$(om --target "${ops_man_url}" --username "${ops_man_user}" --password "${ops_man_password}"  --skip-ssl-validation bosh-env -i omprivatekey)"
              cloudcache-metrics-source/ci/overwrite-cloudcache.bash "${PWD}/gcp-env/metadata"

- name: smoke-test
  plan:
  - get: gcp-env
    tags: [gem-observability-vsphere]
    trigger: true
    passed:
    - overwrite-cloudcache-metrics-release
  - get: cloudcache-metrics-source
    trigger: true
    passed:
      - overwrite-cloudcache-metrics-release
  - get: cloudcache-metrics-release-ci-image
    trigger: true
    passed:
      - overwrite-cloudcache-metrics-release
  - task: run-test
    image: cloudcache-metrics-release-ci-image
    config:
      platform: linux
      inputs:
        - name: gcp-env
        - name: cloudcache-metrics-source
      run:
        path: bash
        args:
          - -ec
          - |
            bash cloudcache-metrics-source/ci/smoke-test.bash "${PWD}/gcp-env/metadata"

- name: release-env
  plan:
  - get: gcp-env
    tags: [gem-observability-vsphere]
    trigger: true
    passed:
    - smoke-test
  - put: gcp-env
    tags: [gem-observability-vsphere]
    params:
      action: unclaim
      env_file: gcp-env/metadata

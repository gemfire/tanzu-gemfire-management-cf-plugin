// Code generated by counterfeiter. DO NOT EDIT.
package implfakes

import (
	"sync"

	"github.com/gemfire/tanzu-gemfire-management-cf-plugin/domain"
	"github.com/gemfire/tanzu-gemfire-management-cf-plugin/impl"
)

type FakeConnectionProvider struct {
	GetConnectionDataStub        func(*domain.CommandData) error
	getConnectionDataMutex       sync.RWMutex
	getConnectionDataArgsForCall []struct {
		arg1 *domain.CommandData
	}
	getConnectionDataReturns struct {
		result1 error
	}
	getConnectionDataReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConnectionProvider) GetConnectionData(arg1 *domain.CommandData) error {
	fake.getConnectionDataMutex.Lock()
	ret, specificReturn := fake.getConnectionDataReturnsOnCall[len(fake.getConnectionDataArgsForCall)]
	fake.getConnectionDataArgsForCall = append(fake.getConnectionDataArgsForCall, struct {
		arg1 *domain.CommandData
	}{arg1})
	fake.recordInvocation("GetConnectionData", []interface{}{arg1})
	fake.getConnectionDataMutex.Unlock()
	if fake.GetConnectionDataStub != nil {
		return fake.GetConnectionDataStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getConnectionDataReturns
	return fakeReturns.result1
}

func (fake *FakeConnectionProvider) GetConnectionDataCallCount() int {
	fake.getConnectionDataMutex.RLock()
	defer fake.getConnectionDataMutex.RUnlock()
	return len(fake.getConnectionDataArgsForCall)
}

func (fake *FakeConnectionProvider) GetConnectionDataCalls(stub func(*domain.CommandData) error) {
	fake.getConnectionDataMutex.Lock()
	defer fake.getConnectionDataMutex.Unlock()
	fake.GetConnectionDataStub = stub
}

func (fake *FakeConnectionProvider) GetConnectionDataArgsForCall(i int) *domain.CommandData {
	fake.getConnectionDataMutex.RLock()
	defer fake.getConnectionDataMutex.RUnlock()
	argsForCall := fake.getConnectionDataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConnectionProvider) GetConnectionDataReturns(result1 error) {
	fake.getConnectionDataMutex.Lock()
	defer fake.getConnectionDataMutex.Unlock()
	fake.GetConnectionDataStub = nil
	fake.getConnectionDataReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConnectionProvider) GetConnectionDataReturnsOnCall(i int, result1 error) {
	fake.getConnectionDataMutex.Lock()
	defer fake.getConnectionDataMutex.Unlock()
	fake.GetConnectionDataStub = nil
	if fake.getConnectionDataReturnsOnCall == nil {
		fake.getConnectionDataReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getConnectionDataReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConnectionProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getConnectionDataMutex.RLock()
	defer fake.getConnectionDataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConnectionProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ impl.ConnectionProvider = new(FakeConnectionProvider)

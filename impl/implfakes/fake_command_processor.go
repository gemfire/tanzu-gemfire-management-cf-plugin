// Code generated by counterfeiter. DO NOT EDIT.
package implfakes

import (
	"sync"

	"github.com/gemfire/cloudcache-management-cf-plugin/domain"
	"github.com/gemfire/cloudcache-management-cf-plugin/impl"
)

type FakeCommandProcessor struct {
	ProcessCommandStub        func(*domain.CommandData) error
	processCommandMutex       sync.RWMutex
	processCommandArgsForCall []struct {
		arg1 *domain.CommandData
	}
	processCommandReturns struct {
		result1 error
	}
	processCommandReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCommandProcessor) ProcessCommand(arg1 *domain.CommandData) error {
	fake.processCommandMutex.Lock()
	ret, specificReturn := fake.processCommandReturnsOnCall[len(fake.processCommandArgsForCall)]
	fake.processCommandArgsForCall = append(fake.processCommandArgsForCall, struct {
		arg1 *domain.CommandData
	}{arg1})
	fake.recordInvocation("ProcessCommand", []interface{}{arg1})
	fake.processCommandMutex.Unlock()
	if fake.ProcessCommandStub != nil {
		return fake.ProcessCommandStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.processCommandReturns
	return fakeReturns.result1
}

func (fake *FakeCommandProcessor) ProcessCommandCallCount() int {
	fake.processCommandMutex.RLock()
	defer fake.processCommandMutex.RUnlock()
	return len(fake.processCommandArgsForCall)
}

func (fake *FakeCommandProcessor) ProcessCommandCalls(stub func(*domain.CommandData) error) {
	fake.processCommandMutex.Lock()
	defer fake.processCommandMutex.Unlock()
	fake.ProcessCommandStub = stub
}

func (fake *FakeCommandProcessor) ProcessCommandArgsForCall(i int) *domain.CommandData {
	fake.processCommandMutex.RLock()
	defer fake.processCommandMutex.RUnlock()
	argsForCall := fake.processCommandArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCommandProcessor) ProcessCommandReturns(result1 error) {
	fake.processCommandMutex.Lock()
	defer fake.processCommandMutex.Unlock()
	fake.ProcessCommandStub = nil
	fake.processCommandReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCommandProcessor) ProcessCommandReturnsOnCall(i int, result1 error) {
	fake.processCommandMutex.Lock()
	defer fake.processCommandMutex.Unlock()
	fake.ProcessCommandStub = nil
	if fake.processCommandReturnsOnCall == nil {
		fake.processCommandReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.processCommandReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCommandProcessor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.processCommandMutex.RLock()
	defer fake.processCommandMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCommandProcessor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ impl.CommandProcessor = new(FakeCommandProcessor)

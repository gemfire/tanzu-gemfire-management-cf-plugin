// Code generated by counterfeiter. DO NOT EDIT.
package commonfakes

import (
	"encoding/json"
	"sync"

	"github.com/gemfire/cloudcache-management-cf-plugin/impl/common"
)

type FakeJQFilter struct {
	EvalStub        func(string, string, ...string) ([]json.RawMessage, error)
	evalMutex       sync.RWMutex
	evalArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []string
	}
	evalReturns struct {
		result1 []json.RawMessage
		result2 error
	}
	evalReturnsOnCall map[int]struct {
		result1 []json.RawMessage
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeJQFilter) Eval(arg1 string, arg2 string, arg3 ...string) ([]json.RawMessage, error) {
	fake.evalMutex.Lock()
	ret, specificReturn := fake.evalReturnsOnCall[len(fake.evalArgsForCall)]
	fake.evalArgsForCall = append(fake.evalArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	fake.recordInvocation("Eval", []interface{}{arg1, arg2, arg3})
	fake.evalMutex.Unlock()
	if fake.EvalStub != nil {
		return fake.EvalStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.evalReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeJQFilter) EvalCallCount() int {
	fake.evalMutex.RLock()
	defer fake.evalMutex.RUnlock()
	return len(fake.evalArgsForCall)
}

func (fake *FakeJQFilter) EvalCalls(stub func(string, string, ...string) ([]json.RawMessage, error)) {
	fake.evalMutex.Lock()
	defer fake.evalMutex.Unlock()
	fake.EvalStub = stub
}

func (fake *FakeJQFilter) EvalArgsForCall(i int) (string, string, []string) {
	fake.evalMutex.RLock()
	defer fake.evalMutex.RUnlock()
	argsForCall := fake.evalArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeJQFilter) EvalReturns(result1 []json.RawMessage, result2 error) {
	fake.evalMutex.Lock()
	defer fake.evalMutex.Unlock()
	fake.EvalStub = nil
	fake.evalReturns = struct {
		result1 []json.RawMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeJQFilter) EvalReturnsOnCall(i int, result1 []json.RawMessage, result2 error) {
	fake.evalMutex.Lock()
	defer fake.evalMutex.Unlock()
	fake.EvalStub = nil
	if fake.evalReturnsOnCall == nil {
		fake.evalReturnsOnCall = make(map[int]struct {
			result1 []json.RawMessage
			result2 error
		})
	}
	fake.evalReturnsOnCall[i] = struct {
		result1 []json.RawMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeJQFilter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.evalMutex.RLock()
	defer fake.evalMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeJQFilter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ common.JQFilter = new(FakeJQFilter)

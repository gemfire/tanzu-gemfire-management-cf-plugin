// Code generated by counterfeiter. DO NOT EDIT.
package cloudcachemanagementcfpluginfakes

import (
	"github.com/gemfire/cloudcache-management-cf-plugin/cfservice"
	"sync"
)

type FakeCfService struct {
	CmdStub        func(string, ...string) (string, error)
	cmdMutex       sync.RWMutex
	cmdArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	cmdReturns struct {
		result1 string
		result2 error
	}
	cmdReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCfService) Cmd(arg1 string, arg2 ...string) (string, error) {
	fake.cmdMutex.Lock()
	ret, specificReturn := fake.cmdReturnsOnCall[len(fake.cmdArgsForCall)]
	fake.cmdArgsForCall = append(fake.cmdArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2})
	fake.recordInvocation("Cmd", []interface{}{arg1, arg2})
	fake.cmdMutex.Unlock()
	if fake.CmdStub != nil {
		return fake.CmdStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.cmdReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCfService) CmdCallCount() int {
	fake.cmdMutex.RLock()
	defer fake.cmdMutex.RUnlock()
	return len(fake.cmdArgsForCall)
}

func (fake *FakeCfService) CmdCalls(stub func(string, ...string) (string, error)) {
	fake.cmdMutex.Lock()
	defer fake.cmdMutex.Unlock()
	fake.CmdStub = stub
}

func (fake *FakeCfService) CmdArgsForCall(i int) (string, []string) {
	fake.cmdMutex.RLock()
	defer fake.cmdMutex.RUnlock()
	argsForCall := fake.cmdArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCfService) CmdReturns(result1 string, result2 error) {
	fake.cmdMutex.Lock()
	defer fake.cmdMutex.Unlock()
	fake.CmdStub = nil
	fake.cmdReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCfService) CmdReturnsOnCall(i int, result1 string, result2 error) {
	fake.cmdMutex.Lock()
	defer fake.cmdMutex.Unlock()
	fake.CmdStub = nil
	if fake.cmdReturnsOnCall == nil {
		fake.cmdReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.cmdReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCfService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cmdMutex.RLock()
	defer fake.cmdMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCfService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cfservice.CfService = new(FakeCfService)
